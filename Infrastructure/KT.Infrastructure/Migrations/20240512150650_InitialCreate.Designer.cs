// <auto-generated />
using System;
using KT.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KT.Infrastructure.Migrations
{
    [DbContext(typeof(KtDbContext))]
    [Migration("20240512150650_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("KT")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KT.Domain.CourseAggregate.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CourseStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.ToTable("Courses", "Course");
                });

            modelBuilder.Entity("KT.Domain.CourseTemplateAggregate.CourseTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("CourseTemplateStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseTemplates", "CourseTemplate");
                });

            modelBuilder.Entity("KT.Domain.LearnerAggregate.Learner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Learners", "Learner");
                });

            modelBuilder.Entity("KT.Domain.ModuleTemplateAggregate.ModuleTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CriteriaTemplates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("ModuleType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ModuleTemplates", "ModuleTemplate");
                });

            modelBuilder.Entity("KT.Domain.SessionAggregate.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CohortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sessions", "Session");
                });

            modelBuilder.Entity("KT.Domain.CourseAggregate.Course", b =>
                {
                    b.HasOne("KT.Domain.LearnerAggregate.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("KT.Domain.CourseAggregate.Entities.Module", "Modules", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("AwardingOrganisation")
                                .HasColumnType("int");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Criteria")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.Property<int>("ModuleStatus")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("Id");

                            b1.HasIndex("CourseId");

                            b1.ToTable("Modules", "Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("KT.Domain.CourseTemplateAggregate.CourseTemplate", b =>
                {
                    b.OwnsOne("KT.Domain.CourseTemplateAggregate.Entities.ActivityPlanTemplate", "ActivityPlanTemplate", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CourseTemplateId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("CourseTemplateId")
                                .IsUnique();

                            b1.ToTable("ActivityPlanTemplates", "CourseTemplate");

                            b1.WithOwner()
                                .HasForeignKey("CourseTemplateId");

                            b1.OwnsMany("KT.Domain.CourseTemplateAggregate.Entities.ActivityTemplate", "ActivityTemplates", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("ActivityPlanTemplateId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("DocumentIds")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ModuleTemplateIds")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("ScheduleDetails")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ActivityPlanTemplateId");

                                    b2.ToTable("ActivityTemplates", "CourseTemplate");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityPlanTemplateId");
                                });

                            b1.Navigation("ActivityTemplates");
                        });

                    b.OwnsOne("KT.Domain.CourseTemplateAggregate.Entities.SessionPlanTemplate", "SessionPlanTemplate", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CourseTemplateId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("CourseTemplateId")
                                .IsUnique();

                            b1.ToTable("SessionPlanTemplates", "CourseTemplate");

                            b1.WithOwner()
                                .HasForeignKey("CourseTemplateId");

                            b1.OwnsMany("KT.Domain.CourseTemplateAggregate.Entities.SessionTemplate", "SessionTemplates", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid?>("CohortId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Location")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<string>("MeetingLink")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("nvarchar(500)");

                                    b2.Property<string>("Notes")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("nvarchar(500)");

                                    b2.Property<string>("ScheduleDetails")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid>("SessionPlanTemplateId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("SessionType")
                                        .HasColumnType("int");

                                    b2.HasKey("Id");

                                    b2.HasIndex("SessionPlanTemplateId");

                                    b2.ToTable("SessionTemplates", "CourseTemplate");

                                    b2.WithOwner()
                                        .HasForeignKey("SessionPlanTemplateId");
                                });

                            b1.Navigation("SessionTemplates");
                        });

                    b.OwnsMany("KT.Domain.CourseTemplateAggregate.ValueObjects.CourseTemplateModuleTemplate", "CourseTemplateModuleTemplates", b1 =>
                        {
                            b1.Property<Guid>("CourseTemplateId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ModuleTemplateId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CourseTemplateId", "ModuleTemplateId");

                            b1.HasIndex("ModuleTemplateId");

                            b1.ToTable("CourseTemplateModuleTemplates", "CourseTemplate");

                            b1.WithOwner()
                                .HasForeignKey("ModuleTemplateId");
                        });

                    b.Navigation("ActivityPlanTemplate")
                        .IsRequired();

                    b.Navigation("CourseTemplateModuleTemplates");

                    b.Navigation("SessionPlanTemplate")
                        .IsRequired();
                });

            modelBuilder.Entity("KT.Domain.LearnerAggregate.Learner", b =>
                {
                    b.OwnsMany("KT.Domain.LearnerAggregate.Entities.LearningPlan", "LearningPlans", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<Guid>("LearnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("Id");

                            b1.HasIndex("LearnerId");

                            b1.ToTable("LearningPlans", "Learner");

                            b1.WithOwner()
                                .HasForeignKey("LearnerId");
                        });

                    b.Navigation("LearningPlans");
                });

            modelBuilder.Entity("KT.Domain.SessionAggregate.Session", b =>
                {
                    b.HasOne("KT.Domain.CourseAggregate.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
